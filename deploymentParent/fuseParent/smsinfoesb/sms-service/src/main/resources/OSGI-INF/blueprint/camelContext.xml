<?xml version="1.0" encoding="UTF-8"?>
<!-- TEST jpa 1.1.0 -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:jpa="http://aries.apache.org/xmlns/jpa/v1.0.0"
           xmlns:tx="http://aries.apache.org/xmlns/transactions/v1.0.0"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">


    <cxf:cxfEndpoint id="smsCxfEndpoint"
                     address="{{ua.np.services.smsinfo.endpoint.address}}/{{ua.np.services.smsinfo.endpoint.name}}"
                     serviceClass="ua.np.services.smsinfo.SmsService"
                     endpointName="e:SmsEndpoint"
                     serviceName="s:SmsService"
                     xmlns:e="http://smsinfo.services.np.ua/endpoint"
                     xmlns:s="http://smsinfo.services.np.ua/service">
	    <cxf:properties>
	        <entry key="setDefaultBus" value="true"/>
	    </cxf:properties>
	</cxf:cxfEndpoint>


    <camelContext id="sms-service-context" trace="{{ua.np.services.smsinfo.camel-trace}}" xmlns="http://camel.apache.org/schema/blueprint">

        <dataFormats>
            <jaxb contextPath="ua.np.services.smsinfo" prettyPrint="true" id="apiJaxb"/>
        </dataFormats>

        <route id="init" startupOrder="10">
            <from uri="timer://foo?period=0s;delay=1s;repeatCount=1"/>
            <bean ref="smsGroupDao" method="init"/>
        </route>
        
        
        <!--invokes messages processing from cxf, process pojo SmsBulk -->
        <route id="cxf-route" startupOrder="120">
            <from uri="cxf:bean:smsCxfEndpoint" />
            <setBody>
                <simple>${body[0]}</simple>
            </setBody>
            <to uri="direct-vm:persist-request"/>
        </route>

        <!-- persists all Sms from bulk, returns the bulk to legacy responce and wireTaps it to collector-route for sending-->
        <route id="persist-request-route" startupOrder="110">
            <from uri="direct-vm:persist-request"/>
            <bean ref="smsGroupDao" method="persistSms" />
            <wireTap uri="direct:define-sender"/>
        </route>

        <route id="define-sender-route" startupOrder="100">
            <from uri="direct:define-sender"/>
            <choice>
                <when>
                    <simple>'{{ua.np.services.smsinfo.gmsu-priority}}' == 'false'</simple>
                    <to uri="direct:ks-life-aggregator"/>
                </when>
                <otherwise>
                    <to uri="direct-vm:gmsu-aggregator"/>
                </otherwise>
            </choice>
        </route>

        <route id="kievstar-life-aggregation-route" startupOrder="80">
            <from uri="direct:ks-life-aggregator"/>
	        <split>
                <tokenize token="sms" xml="true"></tokenize>
                <setHeader headerName="phoneNumber"><xpath resultType="java.lang.String">/sms/phoneNumber</xpath></setHeader>
                <choice>
                    <when>
                        <simple>${header.phoneNumber} regex &#39;^{{ua.np.services.smsinfo.kievstar-codes-matcher}}&#39;</simple>
	                    <to uri="direct-vm:kievstar-aggregator"/>
                    </when>
                    <otherwise>
	                    <to uri="direct-vm:life-aggregator"/>
                    </otherwise>
                </choice>
            </split>
        </route>

        <!-- updates all Sms's from group, with senderGroupId, senderdId, falg and state by id with named qry "updateSmsStateAndFlag" -->
        <route id="persist-responce-route" startupOrder="70">
            <from uri="direct-vm:persist-responce"/>
            <bean ref="smsGroupDao" method="mergeSmsGroup"/>
        </route>

        <route id="update-state-route" startupOrder="60">
            <from uri="direct-vm:update-state"/>
            <bean ref="smsGroupDao" method="updateSmsStatesBySenderId"/>
        </route>

        <route id="update-state-gmsu-route" startupOrder="50">
            <from uri="direct-vm:update-state-by-id"/>
            <bean ref="smsGroupDao" method="updateGmsuStates"/>
        </route>

        <route id="get-not-accepted-gmsu-group-route" startupOrder="40">
            <from uri="direct-vm:get-not-accepted-gmsu-group"/>
            <bean ref="smsGroupDao" method="getNotAcceptedGmsuGroup"/>
        </route>

        <!-- returns the count of statuses that have been changed for certain systemName -->
        <route id="get-delivery-data-changecount-route" startupOrder="30">
            <from uri="direct-vm:get-delivery-data-changecount"/>
            <setProperty propertyName="sysName"><xpath resultType="java.lang.String">/statusRequest/systemName</xpath></setProperty>
            <to uri="bean:smsGroupDao?method=getDeliveryStatusChangeCount(${property.sysName})"/>
            <setBody>
                <simple>
                    &lt;statusRequest&gt;
                    &lt;systemName&gt;${property.sysName}&lt;/systemName&gt;
                    &lt;changeCount&gt;${body}&lt;/changeCount&gt;
                    &lt;/statusRequest&gt;
                </simple>
            </setBody>
        </route>

        <!-- get-states -->
        <route id="get-states-route" startupOrder="20">
            <from uri="direct-vm:get-states"/>
            <setProperty propertyName="sysName"><xpath resultType="java.lang.String">/statusRequest/systemName</xpath></setProperty>
            <to uri="bean:smsGroupDao?method=getStates(${property.sysName})"/>
            <marshal ref="apiJaxb"/>
        </route>
    </camelContext>


    <bean id="smsGroupDao" class="ua.np.services.smsinfo.impl.SmsGroupDao" activation="eager">
<!-- THIS provided solution with overriding hibernate props seems doesn't work TODO: try to create this EMF first> -->        
        <jpa:context unitname="sms-service-pu-remote" property="entityManager"/>
<!--		<jpa:map>
        		<entry key="hibernate.dialect" value ="{{ua.np.services.smsinfo.hibernate.dialect}}"/>
        		<entry key="hibernate.hbm2ddl.auto"	value ="{{ua.np.services.smsinfo.hibernate.hbm2ddl.auto}}"/>
        		<entry key="hibernate.archive.autodetection" value ="{{ua.np.services.smsinfo.hibernate.autodetect}}"/>
        		<entry key="hibernate.order_updates" value ="{{ua.np.services.smsinfo.hibernate.ord_updates}}"/>
        		<entry key="hibernate.hibernate.max_fetch_depth" value ="{{ua.np.services.smsinfo.hibernate.max_fetch_depth}}"/>
        		<entry key="hibernate.default_batch_fetch_size" value ="{{ua.np.services.smsinfo.hibernate.batch_fetch_size}}"/>
        		<entry key="hibernate.jdbc.fetch_size" value ="{{ua.np.services.smsinfo.hibernate.jdbc_fetch-size}}"/>
        		<entry key="hibernate.jdbc.batch_size" value ="{{ua.np.services.smsinfo.hibernate.jdbc_batch_size}}"/>
        		<entry key="hibernate.jdbc.batch_versioned_data" value ="{{ua.np.services.smsinfo.hibernate.jdbc_batch_vers_data}}"/>
        		<entry key="hibernate.show_sql" value ="{{ua.np.services.smsinfo.hibernate.show_sql}}"/>
        		<entry key="hibernate.format_sql" value ="{{ua.np.services.smsinfo.hibernate.format_sql}}"/>
        		<entry key="hibernate.use_sql_comments" value ="{{ua.np.services.smsinfo.hibernate.use_sql_comments}}"/>
        		<entry key="hibernate.generate_statistics" value ="{{ua.np.services.smsinfo.hibernate.gener_stats}}"/>
        	</jpa:map>
        </jpa:context>
        
 -->        
 		<tx:transaction method="*" value="Required" />
    </bean>

</blueprint>