<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="sms_legacy_stress_test" id="49e84d6d-f15a-4b0d-bda4-bdd10cf12690" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="limits">Time=900;Failures=20;</con:property></con:attributes><con:addons/><con:scene label="Stress" id="1be255cb-cd35-4174-a2e2-95a594ad6ca6" version="219"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="gui.layoutX">266</con:property><con:property key="gui.layoutY">208</con:property><con:property key="miniature_fx2"></con:property><con:property key="limits">Time=900;Failures=20;</con:property></con:attributes><con:addons><con:addon type="com.eviware.loadui.api.assertion.AssertionAddon" id="c9080431-4368-4226-b045-ad35056d0d15"><con:attributes><con:property key="parentId">a43832ab-9497-42ce-aeef-39a42254ce9a</con:property><con:property key="valueReference">rO0ABXNyADdjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5zZXJpYWxpemF0aW9uLlN0YXRpc3RpY1Jlc29sdmVyJwTr+w+xV3ECAARMAA1ob2xkZXJBZGRyZXNzdAASTGphdmEvbGFuZy9TdHJpbmc7TAAGc291cmNlcQB+AAFMAA1zdGF0aXN0aWNOYW1lcQB+AAFMAAx2YXJpYWJsZU5hbWVxAH4AAXhwdAAkYTQzODMyYWItOTQ5Ny00MmNlLWFlZWYtMzlhNDIyNTRjZTlhdAAEbWFpbnQABVRPVEFMdAAJRGlzY2FyZGVk</con:property><con:property key="Labeled@label">Create counterparty receipient discarded > 5</con:property><con:property key="constraint">rO0ABXNyADFjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5hc3NlcnRpb24uUmFuZ2VDb25zdHJhaW50Y94NW62dOawCAAJEAANtYXhEAANtaW54cEAUAAAAAAAAAAAAAAAAAAA=</con:property><con:property key="tolerancePeriod">-1</con:property><con:property key="toleranceAllowedOccurrences">0</con:property></con:attributes><con:addons/></con:addon><con:addon type="com.eviware.loadui.api.assertion.AssertionAddon" id="ff794c0e-b056-440e-8d05-71e3c4e72fd9"><con:attributes><con:property key="parentId">b5030b9a-f521-44b3-87ce-c2d02dc802a7</con:property><con:property key="valueReference">rO0ABXNyADdjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5zZXJpYWxpemF0aW9uLlN0YXRpc3RpY1Jlc29sdmVyJwTr+w+xV3ECAARMAA1ob2xkZXJBZGRyZXNzdAASTGphdmEvbGFuZy9TdHJpbmc7TAAGc291cmNlcQB+AAFMAA1zdGF0aXN0aWNOYW1lcQB+AAFMAAx2YXJpYWJsZU5hbWVxAH4AAXhwdAAkYjUwMzBiOWEtZjUyMS00NGIzLTg3Y2UtYzJkMDJkYzgwMmE3dAAEbWFpbnQABVRPVEFMdAAJRGlzY2FyZGVk</con:property><con:property key="Labeled@label">Find counterparty sender discarded > 5</con:property><con:property key="constraint">rO0ABXNyADFjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5hc3NlcnRpb24uUmFuZ2VDb25zdHJhaW50Y94NW62dOawCAAJEAANtYXhEAANtaW54cEAUAAAAAAAAAAAAAAAAAAA=</con:property><con:property key="tolerancePeriod">-1</con:property><con:property key="toleranceAllowedOccurrences">0</con:property></con:attributes><con:addons/></con:addon><con:addon type="com.eviware.loadui.api.assertion.AssertionAddon" id="54e10f97-b534-4521-9c55-00136b2dc80b"><con:attributes><con:property key="parentId">0a72fc5d-9485-418d-bf15-65dac8aed6ff</con:property><con:property key="valueReference">rO0ABXNyADdjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5zZXJpYWxpemF0aW9uLlN0YXRpc3RpY1Jlc29sdmVyJwTr+w+xV3ECAARMAA1ob2xkZXJBZGRyZXNzdAASTGphdmEvbGFuZy9TdHJpbmc7TAAGc291cmNlcQB+AAFMAA1zdGF0aXN0aWNOYW1lcQB+AAFMAAx2YXJpYWJsZU5hbWVxAH4AAXhwdAAkMGE3MmZjNWQtOTQ4NS00MThkLWJmMTUtNjVkYWM4YWVkNmZmdAAEbWFpbnQABVRPVEFMdAAJRGlzY2FyZGVk</con:property><con:property key="Labeled@label">Get counterparty receipient discarded > 5</con:property><con:property key="constraint">rO0ABXNyADFjb20uZXZpd2FyZS5sb2FkdWkudXRpbC5hc3NlcnRpb24uUmFuZ2VDb25zdHJhaW50Y94NW62dOawCAAJEAANtYXhEAANtaW54cEAUAAAAAAAAAAAAAAAAAAA=</con:property><con:property key="tolerancePeriod">-1</con:property><con:property key="toleranceAllowedOccurrences">0</con:property></con:attributes><con:addons/></con:addon></con:addons><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 1 message" id="b5030b9a-f521-44b3-87ce-c2d02dc802a7"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">200</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" type="java.lang.String" xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">240</con:property><con:property key="gui.layoutY">445</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 10 messages" id="a43832ab-9497-42ce-aeef-39a42254ce9a"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">200</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" type="java.lang.String" xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR10</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">206</con:property><con:property key="gui.layoutY">691</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 100 messages" id="0a72fc5d-9485-418d-bf15-65dac8aed6ff"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">200</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" type="java.lang.String" xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR100</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">436</con:property><con:property key="gui.layoutY">441</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter 1" id="bf90de73-edc6-40f9-8b0d-c7246c35f016" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[//
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 *
 * @id com.eviware.Splitter
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */


import com.eviware.loadui.LoadUI

//Here to support Splitters created in loadUI 1.0, remove in the future:
try { renameProperty( 'outputs', 'numOutputs' ) } catch( e ) {}

incomingTerminal.description = 'Recieved messages will be outputted in different output terminals.'

total = counters['total_output']
countDisplays = [:]
terminalProbabilities = [:]
latestChanged = [:]
resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
totalReset = 0
changesDueToPropagation = [:]

for( i=0; i < outgoingTerminalList.size(); i++ ) {
	countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
	initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
	terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
		if( oldVal != null && !wasChangedDueToPropagation( i ) )
		{
			compensateProbabilities( i, newVal - oldVal )
		}
	}
	latestChanged[i] = 0
}

def wasChangedDueToPropagation( propertyIndex ) {
	if ( changesDueToPropagation.containsKey( propertyIndex ) )
		return changesDueToPropagation.get( propertyIndex ) + 300 >  System.currentTimeMillis() 
	return false
}

def randomizeTerminal()
{
	 r = random.nextInt( 100 )
	 s = 0
	 for(entry in terminalProbabilities) {
		  p = entry.value.value
		  if( s <= r && s+p > r )
				return entry.key
		  s += p
	 }
	 return randomizeTerminal() //in case no terminal matched because of rounding errors, we try it again
}

def compensateProbabilities( changedProperty, diff ) {
	isCompensatingProbabilities = true
	latestChanged[changedProperty] = System.currentTimeMillis()
	
	while( diff > 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 0  }.collect{ it.value }.min() }.key
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( propertyToChange.value, diff )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value -= changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff -= changeSize
	}
	
	while( diff < 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 100  }.collect{ it.value }.min() }.key
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( 100 - propertyToChange.value, Math.abs(diff) )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value += changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff += changeSize
	}
}

createProperty( 'type', String, "Round-Robin" ) {
	if ( controller ) refreshLayout()
}

if ( !LoadUI.headless ) {
    slider = slider(min: 2, max: 10, majorTickUnit:1, minorTickCount:0, showTickLabels: true, snapToTicks: true, showTickMarks: true)
    invalidator = invalidationListener { if(!slider.valueChanging) numOutputs.value = slider.value }
    slider.valueChangingProperty().addListener( invalidator )
    slider.valueProperty().addListener( invalidator )
}

createProperty( 'numOutputs', Integer, 2 ) { outputCount ->
	while( outgoingTerminalList.size() < outputCount ) {
		createOutgoing()
		def i = outgoingTerminalList.size() - 1
		
		countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
		
		initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
		terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
			if( oldVal != null && !wasChangedDueToPropagation( i ) )
			{
				compensateProbabilities( i, newVal - oldVal )
			}
		}
		latestChanged[i] = 0
	}
	while( outgoingTerminalList.size() > outputCount ) {
		def i = outgoingTerminalList.size() - 1
		deleteOutgoing()
		countDisplays.remove( i )?.release()
		compensateProbabilities( i, terminalProbabilities[i].value * -1 )
		latestChanged.remove( i )
		deleteProperty( terminalProbabilities.remove( i )?.key )
	}
	if ( controller ) {
        slider.value = outputCount
        refreshLayout()
    }
}

random = new Random()
lastOutput = -1

onMessage = { outgoing, incoming, message ->
	if( incoming == incomingTerminal ) {
		if( type.value == "Round-Robin" ) lastOutput = (lastOutput + 1) % numOutputs.value
		else lastOutput = randomizeTerminal() //random.nextInt( numOutputs.value )
		send( outgoingTerminalList[lastOutput], message )
		counters["output_$lastOutput"].increment()
		total.increment()
	}
}

onAction( "RESET" ) {
	lastOutput = -1
	resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	totalReset = 0
}

refreshLayout = {
	layout ( layout:'gap 10 5' ) {
		node( widget: 'selectorWidget', label: "Type", labels: [ "Round-Robin", "Random" ], default: type.value, selected: type )
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			label( 'Number of Outputs' )
			node( component: slider, constraints: 'center, w 270!' )
		}
		
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			box( widget: 'display',  constraints: 'w 100!' ) {
				node( label: 'Count', content: { total.get() - totalReset }, constraints: 'wrap' )
			}
//			action( label:'Clear', action: {
//				for( i in 0..9 ) resetValues[i] = counters["output_$i"].get()
//				totalReset = total.get()
//			}, constraints:'right' )
		}
		separator( vertical: false )
		box( layout: 'ins 0, center', constraints: 'span 5, w 498!' ) {
			def gap = (int)((249/numOutputs.value)-19)
			def moreThanOneTerminal = numOutputs.value > 1;
			for( i=0; i < outgoingTerminalList.size(); i++ ) {
				if( i != 0 ) separator( vertical: true )
				
				if( type.value == "Random" ) {
					property( property:terminalProbabilities[i], label:'%', min: 0, max: 100, step: 1, enabled:moreThanOneTerminal, layout: 'ins -15, center', constraints: "w 32!, gap "+gap+" "+gap )
				}
				else {
					box( widget: 'display', layout: 'center', constraints: "w 56!, h 24!, gap "+gap+" "+gap ) {
                        node( content: countDisplays[i], constraints: 'pad -16 -1' )
					}
				}
			}
		}
	}
}

compactLayout {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', content: { total.get() - totalReset } )
		node( label: 'Distribution', content: { (0..outgoingTerminalList.size() - 1).collect( { counters["output_$it"].get() - resetValues[it] } ).join( " " ) } )
	}
}]]></con:property><con:property propagates="true" key="type" type="java.lang.String">Random</con:property><con:property propagates="true" key="numOutputs" type="java.lang.Integer">6</con:property><con:property propagates="true" key="probability0" type="java.lang.Integer">63</con:property><con:property propagates="true" key="probability1" type="java.lang.Integer">15</con:property><con:property propagates="true" key="probability2" type="java.lang.Integer">7</con:property><con:property propagates="true" key="probability3" type="java.lang.Integer">5</con:property><con:property propagates="true" key="probability4" type="java.lang.Integer">5</con:property><con:property propagates="true" key="probability5" type="java.lang.Integer">5</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_digest">e4bb0c0728b8ab5d870bfe0c3e561655</con:property><con:property key="_id">com.eviware.Splitter</con:property><con:property key="_classLoader">com.eviware.Splitter</con:property><con:property key="gui.layoutX">348</con:property><con:property key="gui.layoutY">193</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="0-2 min" id="2be68c97-fac0-40ed-856e-37a3eb77c433" category="scheduler"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @id com.eviware.Interval
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel

import java.util.concurrent.TimeUnit

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = counters[CanvasItem.TIMER_COUNTER]
def canvas = getCanvas()
def runCount = 0

def startFuture = null
def stopFuture = null

def endFuture = null

def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

onAction( "START" ) {
	cancelAll()
	updateState()
}

onAction( "STOP" ) {
	cancelAll()
	updateState()
}

onAction( "RESET" ) {
	interval.position = 0
	runCount = 0
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	cancelTasks()
	startFuture = null
	stopFuture = null
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', content: { "$startAt $unit" } )
		node( label:'Duration', content: { "$duration $unit" } )
	}
}

updateState()]]></con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="startAt" type="java.lang.Long">0</con:property><con:property propagates="true" key="duration" type="java.lang.Long">2</con:property><con:property propagates="true" key="unit" type="java.lang.String">Min</con:property><con:property propagates="true" key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_digest">b26c38c613b4a81a04e293b78d7afe0b</con:property><con:property key="_id">com.eviware.Interval</con:property><con:property key="_classLoader">com.eviware.Interval</con:property><con:property key="gui.layoutX">182</con:property><con:property key="gui.layoutY">-223</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 1" id="4d0c384f-f386-4ec2-ba2e-b8e8a4d13700" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
rate = createProperty( 'rate', Long, 10 ) { schedule() }
unit = createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

burstSize = createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">5</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">942809b49b7d53789d7f37adf41a60f5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">206</con:property><con:property key="gui.layoutY">12</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 2" id="ba418e2f-cd57-4da8-ab00-5a2c49735b30" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
rate = createProperty( 'rate', Long, 10 ) { schedule() }
unit = createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

burstSize = createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">8</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">942809b49b7d53789d7f37adf41a60f5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">486</con:property><con:property key="gui.layoutY">11</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="2-3 min" id="8312c383-ce93-4822-ada4-b071a52f589b" category="scheduler"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @id com.eviware.Interval
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel

import java.util.concurrent.TimeUnit

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = counters[CanvasItem.TIMER_COUNTER]
def canvas = getCanvas()
def runCount = 0

def startFuture = null
def stopFuture = null

def endFuture = null

def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

onAction( "START" ) {
	cancelAll()
	updateState()
}

onAction( "STOP" ) {
	cancelAll()
	updateState()
}

onAction( "RESET" ) {
	interval.position = 0
	runCount = 0
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	cancelTasks()
	startFuture = null
	stopFuture = null
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', content: { "$startAt $unit" } )
		node( label:'Duration', content: { "$duration $unit" } )
	}
}

updateState()]]></con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="startAt" type="java.lang.Long">2</con:property><con:property propagates="true" key="duration" type="java.lang.Long">1</con:property><con:property propagates="true" key="unit" type="java.lang.String">Min</con:property><con:property propagates="true" key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_digest">b26c38c613b4a81a04e293b78d7afe0b</con:property><con:property key="_id">com.eviware.Interval</con:property><con:property key="_classLoader">com.eviware.Interval</con:property><con:property key="gui.layoutX">539</con:property><con:property key="gui.layoutY">-225</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="3-7 min" id="3a029361-86df-420d-a969-f8294cd4ceb4" category="scheduler"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @id com.eviware.Interval
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel

import java.util.concurrent.TimeUnit

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = counters[CanvasItem.TIMER_COUNTER]
def canvas = getCanvas()
def runCount = 0

def startFuture = null
def stopFuture = null

def endFuture = null

def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

onAction( "START" ) {
	cancelAll()
	updateState()
}

onAction( "STOP" ) {
	cancelAll()
	updateState()
}

onAction( "RESET" ) {
	interval.position = 0
	runCount = 0
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	cancelTasks()
	startFuture = null
	stopFuture = null
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', content: { "$startAt $unit" } )
		node( label:'Duration', content: { "$duration $unit" } )
	}
}

updateState()]]></con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="startAt" type="java.lang.Long">4</con:property><con:property propagates="true" key="duration" type="java.lang.Long">5</con:property><con:property propagates="true" key="unit" type="java.lang.String">Min</con:property><con:property propagates="true" key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_digest">b26c38c613b4a81a04e293b78d7afe0b</con:property><con:property key="_id">com.eviware.Interval</con:property><con:property key="_classLoader">com.eviware.Interval</con:property><con:property key="gui.layoutX">1002</con:property><con:property key="gui.layoutY">-245</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="7-12 min" id="bb75eaea-35e2-47b8-ad9a-9e643a2357d5" category="scheduler"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @id com.eviware.Interval
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel

import java.util.concurrent.TimeUnit

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = counters[CanvasItem.TIMER_COUNTER]
def canvas = getCanvas()
def runCount = 0

def startFuture = null
def stopFuture = null

def endFuture = null

def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

onAction( "START" ) {
	cancelAll()
	updateState()
}

onAction( "STOP" ) {
	cancelAll()
	updateState()
}

onAction( "RESET" ) {
	interval.position = 0
	runCount = 0
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	cancelTasks()
	startFuture = null
	stopFuture = null
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', content: { "$startAt $unit" } )
		node( label:'Duration', content: { "$duration $unit" } )
	}
}

updateState()]]></con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="startAt" type="java.lang.Long">7</con:property><con:property propagates="true" key="duration" type="java.lang.Long">5</con:property><con:property propagates="true" key="unit" type="java.lang.String">Min</con:property><con:property propagates="true" key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_digest">b26c38c613b4a81a04e293b78d7afe0b</con:property><con:property key="_id">com.eviware.Interval</con:property><con:property key="_classLoader">com.eviware.Interval</con:property><con:property key="gui.layoutX">1360</con:property><con:property key="gui.layoutY">-231</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 3" id="a09196a2-0b40-47ef-97fb-8304ce604e90" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
rate = createProperty( 'rate', Long, 10 ) { schedule() }
unit = createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

burstSize = createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">942809b49b7d53789d7f37adf41a60f5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">1029</con:property><con:property key="gui.layoutY">-25</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 4" id="cf8c7e7e-06de-4b70-a4f0-8a11ff7fdde7" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
rate = createProperty( 'rate', Long, 10 ) { schedule() }
unit = createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

burstSize = createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">15</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">942809b49b7d53789d7f37adf41a60f5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">8</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter 2" id="4c749644-7458-470a-817e-ecd38d501acd" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[//
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 *
 * @id com.eviware.Splitter
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */


import com.eviware.loadui.LoadUI

//Here to support Splitters created in loadUI 1.0, remove in the future:
try { renameProperty( 'outputs', 'numOutputs' ) } catch( e ) {}

incomingTerminal.description = 'Recieved messages will be outputted in different output terminals.'

total = counters['total_output']
countDisplays = [:]
terminalProbabilities = [:]
latestChanged = [:]
resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
totalReset = 0
changesDueToPropagation = [:]

for( i=0; i < outgoingTerminalList.size(); i++ ) {
	countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
	initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
	terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
		if( oldVal != null && !wasChangedDueToPropagation( i ) )
		{
			compensateProbabilities( i, newVal - oldVal )
		}
	}
	latestChanged[i] = 0
}

def wasChangedDueToPropagation( propertyIndex ) {
	if ( changesDueToPropagation.containsKey( propertyIndex ) )
		return changesDueToPropagation.get( propertyIndex ) + 300 >  System.currentTimeMillis() 
	return false
}

def randomizeTerminal()
{
	 r = random.nextInt( 100 )
	 s = 0
	 for(entry in terminalProbabilities) {
		  p = entry.value.value
		  if( s <= r && s+p > r )
				return entry.key
		  s += p
	 }
	 return randomizeTerminal() //in case no terminal matched because of rounding errors, we try it again
}

def compensateProbabilities( changedProperty, diff ) {
	isCompensatingProbabilities = true
	latestChanged[changedProperty] = System.currentTimeMillis()
	
	while( diff > 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 0  }.collect{ it.value }.min() }.key
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( propertyToChange.value, diff )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value -= changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff -= changeSize
	}
	
	while( diff < 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 100  }.collect{ it.value }.min() }.key
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( 100 - propertyToChange.value, Math.abs(diff) )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value += changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff += changeSize
	}
}

createProperty( 'type', String, "Round-Robin" ) {
	if ( controller ) refreshLayout()
}

if ( !LoadUI.headless ) {
    slider = slider(min: 2, max: 10, majorTickUnit:1, minorTickCount:0, showTickLabels: true, snapToTicks: true, showTickMarks: true)
    invalidator = invalidationListener { if(!slider.valueChanging) numOutputs.value = slider.value }
    slider.valueChangingProperty().addListener( invalidator )
    slider.valueProperty().addListener( invalidator )
}

createProperty( 'numOutputs', Integer, 2 ) { outputCount ->
	while( outgoingTerminalList.size() < outputCount ) {
		createOutgoing()
		def i = outgoingTerminalList.size() - 1
		
		countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
		
		initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
		terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
			if( oldVal != null && !wasChangedDueToPropagation( i ) )
			{
				compensateProbabilities( i, newVal - oldVal )
			}
		}
		latestChanged[i] = 0
	}
	while( outgoingTerminalList.size() > outputCount ) {
		def i = outgoingTerminalList.size() - 1
		deleteOutgoing()
		countDisplays.remove( i )?.release()
		compensateProbabilities( i, terminalProbabilities[i].value * -1 )
		latestChanged.remove( i )
		deleteProperty( terminalProbabilities.remove( i )?.key )
	}
	if ( controller ) {
        slider.value = outputCount
        refreshLayout()
    }
}

random = new Random()
lastOutput = -1

onMessage = { outgoing, incoming, message ->
	if( incoming == incomingTerminal ) {
		if( type.value == "Round-Robin" ) lastOutput = (lastOutput + 1) % numOutputs.value
		else lastOutput = randomizeTerminal() //random.nextInt( numOutputs.value )
		send( outgoingTerminalList[lastOutput], message )
		counters["output_$lastOutput"].increment()
		total.increment()
	}
}

onAction( "RESET" ) {
	lastOutput = -1
	resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	totalReset = 0
}

refreshLayout = {
	layout ( layout:'gap 10 5' ) {
		node( widget: 'selectorWidget', label: "Type", labels: [ "Round-Robin", "Random" ], default: type.value, selected: type )
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			label( 'Number of Outputs' )
			node( component: slider, constraints: 'center, w 270!' )
		}
		
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			box( widget: 'display',  constraints: 'w 100!' ) {
				node( label: 'Count', content: { total.get() - totalReset }, constraints: 'wrap' )
			}
//			action( label:'Clear', action: {
//				for( i in 0..9 ) resetValues[i] = counters["output_$i"].get()
//				totalReset = total.get()
//			}, constraints:'right' )
		}
		separator( vertical: false )
		box( layout: 'ins 0, center', constraints: 'span 5, w 498!' ) {
			def gap = (int)((249/numOutputs.value)-19)
			def moreThanOneTerminal = numOutputs.value > 1;
			for( i=0; i < outgoingTerminalList.size(); i++ ) {
				if( i != 0 ) separator( vertical: true )
				
				if( type.value == "Random" ) {
					property( property:terminalProbabilities[i], label:'%', min: 0, max: 100, step: 1, enabled:moreThanOneTerminal, layout: 'ins -15, center', constraints: "w 32!, gap "+gap+" "+gap )
				}
				else {
					box( widget: 'display', layout: 'center', constraints: "w 56!, h 24!, gap "+gap+" "+gap ) {
                        node( content: countDisplays[i], constraints: 'pad -16 -1' )
					}
				}
			}
		}
	}
}

compactLayout {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', content: { total.get() - totalReset } )
		node( label: 'Distribution', content: { (0..outgoingTerminalList.size() - 1).collect( { counters["output_$it"].get() - resetValues[it] } ).join( " " ) } )
	}
}]]></con:property><con:property propagates="true" key="type" type="java.lang.String">Random</con:property><con:property propagates="true" key="numOutputs" type="java.lang.Integer">7</con:property><con:property propagates="true" key="probability0" type="java.lang.Integer">25</con:property><con:property propagates="true" key="probability1" type="java.lang.Integer">40</con:property><con:property propagates="true" key="probability2" type="java.lang.Integer">10</con:property><con:property propagates="true" key="probability3" type="java.lang.Integer">5</con:property><con:property propagates="true" key="probability4" type="java.lang.Integer">5</con:property><con:property propagates="true" key="probability5" type="java.lang.Integer">5</con:property><con:property propagates="true" key="probability6" type="java.lang.Integer">10</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_digest">e4bb0c0728b8ab5d870bfe0c3e561655</con:property><con:property key="_id">com.eviware.Splitter</con:property><con:property key="_classLoader">com.eviware.Splitter</con:property><con:property key="gui.layoutX">1071</con:property><con:property key="gui.layoutY">198</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 10 messages" id="5b4baff7-7621-47a8-916a-6689dd7bd7b9"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR10</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">967</con:property><con:property key="gui.layoutY">465</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 100 messages" id="beb813e2-1cb8-4266-9758-0b48ccdd73eb"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR100</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">991</con:property><con:property key="gui.layoutY">694</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 250 messages" id="5d7f26ff-7e07-429b-8f5c-0e0aa21bb505"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR250</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">1162</con:property><con:property key="gui.layoutY">423</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="send 500 messages" id="7503a60d-cf09-414c-b685-7afcf6f5740a"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendMessagesTestCaseFOR500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">1182</con:property><con:property key="gui.layoutY">676</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="getDeliveryStatusChangeCount" id="67dcda7d-3157-4826-973d-7f608d0956e5"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">getDeliveryStatusChangeCount TestCase</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">421</con:property><con:property key="gui.layoutY">689</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="getDeliveryStatusData" id="dee1353b-66c8-4794-9a2a-21fda34177af"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">getDeliveryStatusData TestCase</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">630</con:property><con:property key="gui.layoutY">439</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="sendStatusesFromOperators" id="494653b3-78af-4142-9aed-196fcc92a345"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendStatuses</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">713</con:property><con:property key="gui.layoutY">695</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="getDeliveryStatusChangeCount" id="2b9b4b8b-4908-4183-9231-e650c0a698d4"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">getDeliveryStatusChangeCount TestCase</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">1350</con:property><con:property key="gui.layoutY">430</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="getDeliveryStatusData" id="5640ead6-f39e-404f-8c38-ce3c598809d3"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">getDeliveryStatusData TestCase</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">1385</con:property><con:property key="gui.layoutY">680</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="sendStatusesFromOperators" id="064d5404-6045-42ae-8166-cba579fe56ee"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\yushchenko.i\soapui-settings.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="forceShareDatasources" type="java.lang.Boolean">true</con:property><con:property propagates="false" key="projectFile" type="java.lang.String">F:\Java\Apps\smsinfoesb\loadui_tests\SOAPUI_sms_legacy_stress_test.xml</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">sendStatuses</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">SoapUI Runner</con:property><con:property key="gui.layoutX">1621</con:property><con:property key="gui.layoutY">580</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 1" inputTerminalId="b5030b9a-f521-44b3-87ce-c2d02dc802a7/triggerTerminal"/><con:connection outputTerminalId="4d0c384f-f386-4ec2-ba2e-b8e8a4d13700/triggerTerminal" inputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/incomingTerminal"/><con:connection outputTerminalId="ba418e2f-cd57-4da8-ab00-5a2c49735b30/triggerTerminal" inputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/incomingTerminal"/><con:connection outputTerminalId="2be68c97-fac0-40ed-856e-37a3eb77c433/outgoingTerminal" inputTerminalId="4d0c384f-f386-4ec2-ba2e-b8e8a4d13700/stateTerminal"/><con:connection outputTerminalId="8312c383-ce93-4822-ada4-b071a52f589b/outgoingTerminal" inputTerminalId="ba418e2f-cd57-4da8-ab00-5a2c49735b30/stateTerminal"/><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 2" inputTerminalId="a43832ab-9497-42ce-aeef-39a42254ce9a/triggerTerminal"/><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 3" inputTerminalId="0a72fc5d-9485-418d-bf15-65dac8aed6ff/triggerTerminal"/><con:connection outputTerminalId="3a029361-86df-420d-a969-f8294cd4ceb4/outgoingTerminal" inputTerminalId="a09196a2-0b40-47ef-97fb-8304ce604e90/stateTerminal"/><con:connection outputTerminalId="bb75eaea-35e2-47b8-ad9a-9e643a2357d5/outgoingTerminal" inputTerminalId="cf8c7e7e-06de-4b70-a4f0-8a11ff7fdde7/stateTerminal"/><con:connection outputTerminalId="a09196a2-0b40-47ef-97fb-8304ce604e90/triggerTerminal" inputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/incomingTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 1" inputTerminalId="5b4baff7-7621-47a8-916a-6689dd7bd7b9/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 2" inputTerminalId="beb813e2-1cb8-4266-9758-0b48ccdd73eb/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 3" inputTerminalId="5d7f26ff-7e07-429b-8f5c-0e0aa21bb505/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 4" inputTerminalId="7503a60d-cf09-414c-b685-7afcf6f5740a/triggerTerminal"/><con:connection outputTerminalId="cf8c7e7e-06de-4b70-a4f0-8a11ff7fdde7/triggerTerminal" inputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/incomingTerminal"/><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 4" inputTerminalId="67dcda7d-3157-4826-973d-7f608d0956e5/triggerTerminal"/><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 5" inputTerminalId="dee1353b-66c8-4794-9a2a-21fda34177af/triggerTerminal"/><con:connection outputTerminalId="bf90de73-edc6-40f9-8b0d-c7246c35f016/outgoingTerminal 6" inputTerminalId="494653b3-78af-4142-9aed-196fcc92a345/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 5" inputTerminalId="2b9b4b8b-4908-4183-9231-e650c0a698d4/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 6" inputTerminalId="5640ead6-f39e-404f-8c38-ce3c598809d3/triggerTerminal"/><con:connection outputTerminalId="4c749644-7458-470a-817e-ecd38d501acd/outgoingTerminal 7" inputTerminalId="064d5404-6045-42ae-8166-cba579fe56ee/triggerTerminal"/></con:scene><con:statistics><con:page title="TPS to Average time taken"><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Transactions per second"><con:chart statisticHolder="b5030b9a-f521-44b3-87ce-c2d02dc802a7"><con:attributes><con:property key="_CHART_segments">63:36:b5030b9a-f521-44b3-87ce-c2d02dc802a710:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:b5030b9a-f521-44b3-87ce-c2d02dc802a710:Throughput3:TPS4:main_color">#ff7a66</con:property></con:attributes></con:chart><con:chart statisticHolder="a43832ab-9497-42ce-aeef-39a42254ce9a"><con:attributes><con:property key="_CHART_segments">63:36:a43832ab-9497-42ce-aeef-39a42254ce9a10:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:a43832ab-9497-42ce-aeef-39a42254ce9a10:Throughput3:TPS4:main_color">#ffffff</con:property></con:attributes></con:chart><con:chart statisticHolder="0a72fc5d-9485-418d-bf15-65dac8aed6ff"><con:attributes><con:property key="_CHART_segments">63:36:0a72fc5d-9485-418d-bf15-65dac8aed6ff10:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:0a72fc5d-9485-418d-bf15-65dac8aed6ff10:Throughput3:TPS4:main_color">#00b2d2</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">SECONDS</con:property></con:attributes></con:chartGroup><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Time taken average"><con:chart statisticHolder="b5030b9a-f521-44b3-87ce-c2d02dc802a7"><con:attributes><con:property key="_CHART_segments">67:36:b5030b9a-f521-44b3-87ce-c2d02dc802a710:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:b5030b9a-f521-44b3-87ce-c2d02dc802a710:Time Taken7:AVERAGE4:main_color">#c69c6d</con:property></con:attributes></con:chart><con:chart statisticHolder="a43832ab-9497-42ce-aeef-39a42254ce9a"><con:attributes><con:property key="_CHART_segments">67:36:a43832ab-9497-42ce-aeef-39a42254ce9a10:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:a43832ab-9497-42ce-aeef-39a42254ce9a10:Time Taken7:AVERAGE4:main_color">#00b2d2</con:property></con:attributes></con:chart><con:chart statisticHolder="0a72fc5d-9485-418d-bf15-65dac8aed6ff"><con:attributes><con:property key="_CHART_segments">67:36:0a72fc5d-9485-418d-bf15-65dac8aed6ff10:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:0a72fc5d-9485-418d-bf15-65dac8aed6ff10:Time Taken7:AVERAGE4:main_color">#ff9533</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">MINUTES</con:property></con:attributes></con:chartGroup><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Chart 3"><con:chart statisticHolder="7503a60d-cf09-414c-b685-7afcf6f5740a"><con:attributes><con:property key="_CHART_segments">67:36:7503a60d-cf09-414c-b685-7afcf6f5740a10:Time Taken7:AVERAGE4:main63:36:7503a60d-cf09-414c-b685-7afcf6f5740a10:Throughput3:TPS4:main</con:property></con:attributes></con:chart><con:attributes/></con:chartGroup></con:page><con:page title="Untitled Page 1"/><con:page title="Untitled Page 2"/></con:statistics></con:loadui-project>